{"version":3,"sources":["config.js","services/_services.js","helpers/auth-header.js","helpers/history.js","actions/_actions.js","components/Login.js","components/Dashboard.js","App.js","serviceWorker.js","reducers/auth.js","reducers/_reducers.js","reducers/userReducers.js","store/configureStore.js","helpers/_helpers.js","index.js"],"names":["config","apiUrl","userService","login","email","password","requestOptions","method","headers","Content-Type","body","JSON","stringify","fetch","concat","then","handleResponse","user","token","localStorage","setItem","logout","getAll","parse","getItem","Authorization","authHeader","removeItem","response","text","data","ok","status","error","message","statusText","Promise","reject","history","createBrowserHistory","userActions","dispatch","type","success","push","failure","console","log","users","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","submitted","err","handleCancel","bind","assertThisInitialized","handleSubmit","onEmailChange","onPasswordChange","e","preventDefault","setState","_this$state","document","getElementById","reset","target","value","_this$state2","react_default","a","createElement","className","id","name","action","onSubmit","placeholder","onChange","onClick","React","Component","connect","loggedIn","authentication","DashBoard","Link","handleLogout","to","App","user1","Router","Route","path","component","exact","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","initialState","arguments","length","undefined","loggingIn","rootReducer","combineReducers","loading","items","store","createStore","applyMiddleware","thunkMiddleware","firstName","lastName","realFetch","url","opts","resolve","setTimeout","endsWith","params","filteredUsers","filter","responseJson","configureFakeBackend","ReactDOM","render","es","src_App","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8be241bf.chunk.js","sourcesContent":["export const config = {\r\n        apiUrl: 'http://localhost:4000'\r\n    }\r\n\r\n","import { config } from '../config';\r\nimport { authHeader } from '../helpers/auth-header';\r\n\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    getAll\r\n}\r\n\r\n\r\nfunction login(email, password) {\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json'},\r\n        body: JSON.stringify({ email, password })\r\n    }\r\n\r\n    return fetch(`${config.apiUrl}/users/authenticate`, requestOptions)\r\n    .then(handleResponse)\r\n    .then(user => {\r\n        if(user.token) {\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n        }\r\n        return user;\r\n    })\r\n}\r\n\r\nfunction logout () {\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction getAll() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`${config.apiUrl}/users`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                //location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return data;\r\n    });\r\n}\r\n","export function authHeader() {\r\n    // return authorization header with jwt token\r\n    let user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    if (user && user.token) {\r\n        return { 'Authorization': 'Bearer ' + user.token };\r\n    } else {\r\n        return {};\r\n    }\r\n}","import { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();","import { userService } from '../services/_services';\r\nimport { history } from '../helpers/history';\r\n\r\nexport const userActions = {\r\n    login,\r\n    logout,\r\n    getAll\r\n};\r\n\r\nfunction login(email, password) {\r\n    return dispatch => {\r\n        dispatch(request({ email }));\r\n\r\n        userService.login(email, password)\r\n            .then(\r\n                user => { \r\n                    dispatch(success(user));\r\n                    history.push('/');\r\n                },\r\n                error => {\r\n                    dispatch(failure(error));\r\n                    console.log(error);\r\n                }\r\n            );\r\n    };\r\n\r\n    function request(user) { return { type: 'LOGIN_REQUEST', user } }\r\n    function success(user) { return { type: 'LOGIN_SUCCESS', user } }\r\n    function failure(error) { return { type: 'LOGIN_FAILURE', error } }\r\n}\r\n\r\nfunction logout() {\r\n    userService.logout();\r\n    return { type: 'LOGOUT' };\r\n}\r\n\r\nfunction getAll() {\r\n    return dispatch => {\r\n        dispatch(request());\r\n\r\n        userService.getAll()\r\n            .then(\r\n                users => dispatch(success(users)),\r\n                error => dispatch(failure(error))\r\n            );\r\n    };\r\n\r\n    function request() { return { type: 'GETALL_REQUEST' } }\r\n    function success(users) { return { type: 'GETALL_SUCCESS', users } }\r\n    function failure(error) { return { type: 'GETALL_FAILURE', error } }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {  userActions } from '../actions/_actions';\r\n\r\nclass Login extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.props.dispatch(userActions.logout());\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            submitted: false,\r\n            err: \"\"\r\n        }\r\n\r\n        this.handleCancel = this.handleCancel.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        \r\n        this.onEmailChange = this.onEmailChange.bind(this);\r\n        this.onPasswordChange = this.onPasswordChange.bind(this);\r\n    };\r\n\r\n\r\n\r\n    handleSubmit (e) {\r\n        e.preventDefault();\r\n        this.setState({ submitted: true });\r\n        const { email, password } = this.state;\r\n        const { dispatch } = this.props;\r\n\r\n        if(email === \"\" && password === \"\"){\r\n            this.setState(() => ({\r\n                err: \"Please enter email / password\"\r\n            }));\r\n        }\r\n        else if( email === \"\"){\r\n            this.setState(() => ({\r\n                err: \"Please enter email\"\r\n            }));\r\n        } \r\n        else if( password === \"\"){\r\n            this.setState(() => ({\r\n                err: \"Please enter password\"\r\n            }));\r\n        } else {\r\n            if( email && password ) {\r\n                dispatch(userActions.login(email, password))\r\n                \r\n            }\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    handleCancel (e) {\r\n        this.setState(() => ({\r\n            email: \"\",\r\n            password: \"\"\r\n        }));\r\n        let form = document.getElementById(\"login-page\");\r\n        form.reset();\r\n    }\r\n\r\n    onEmailChange (e) {\r\n        const email = e.target.value;\r\n        this.setState(() => ({\r\n            email\r\n        }));\r\n    }\r\n\r\n    onPasswordChange (e) {\r\n        const password = e.target.value;\r\n        this.setState(() => ({\r\n            password\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const { email, password , err} = this.state;\r\n        return (\r\n            <div className=\"main\">\r\n                <form id=\"login-page\" name=\"form\" action=\"action_page.php\" onSubmit={this.handleSubmit}>\r\n                    <label><b>Email Id</b></label>\r\n                    <br />\r\n                    <input type=\"text\" placeholder=\"Enter email\" name=\"uname\" value={email} onChange={this.onEmailChange}/>\r\n\r\n                    <br />\r\n                    <label><b>Password</b></label>\r\n                    <br />\r\n                    <input type=\"password\" placeholder=\"Enter Password\" name=\"psw\" value={password} onChange={this.onPasswordChange}/>\r\n\r\n                    <br />\r\n                    {err && <p className=\"error\">{err}</p>}\r\n                    <button className=\"loginButton\" type=\"submit\">Login</button>\r\n\r\n                </form>\r\n                <button className=\"cancelbtn\" onClick={this.handleCancel}>clear</button>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { loggedIn } = state.authentication;\r\n    return {\r\n        loggedIn\r\n    }\r\n}\r\n \r\n export default connect(mapStateToProps)(Login);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { userActions } from '../actions/_actions';\r\n\r\nclass DashBoard extends React.Component{\r\n    componentDidMount() {\r\n        this.props.dispatch(userActions.getAll());\r\n    }\r\n\r\n    handleLogout() {\r\n        this.props.dispatch(userActions.logout());\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n            <h1 className=\"header\">Successfully Logged in!!!</h1>\r\n            <Link onClick={this.handleLogout.bind(this)} className=\"cancelbtn\" to=\"/\">Logout</Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { users, authentication } = state;\r\n    const { user } = authentication;\r\n    return {\r\n        user,\r\n        users\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(DashBoard);","import React from 'react';\nimport { Route, Router } from 'react-router-dom';\nimport Login from './components/Login';\nimport DashBoard from './components/Dashboard';\nimport { history } from './helpers/history';\nimport { connect } from 'react-redux';\n\nclass App extends React.Component {\n    render() {\n      const user1 = localStorage.getItem('user');\n        return (\n            <Router history={history}>\n                <div>\n                  <Route path=\"/index.html\" component={Login} />\n                    {user1 ? <Route path=\"/\" component={DashBoard} user={user1}/> : <Route path=\"/\" component={Login} exact={true} />}\n                </div>\n            </Router>\n        )\n    }\n\n}\n\n\nconst mapStateToProps = (state) => {\n  const { users, authentication } = state;\n  const { user } = authentication;\n  return {\n      user,\n      users\n  };\n}\n\nexport default connect(mapStateToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let user = JSON.parse(localStorage.getItem('user'));\r\nconst initialState = user ? { loggedIn: true, user } : {};\r\n\r\n function authentication(state = initialState, action) {\r\n    switch (action.type) {\r\n    case 'LOGIN_REQUEST':\r\n        return {\r\n        loggingIn: true,\r\n        user: action.user\r\n        };\r\n    case 'LOGIN_SUCCESS':\r\n        return {\r\n        loggedIn: true,\r\n        user: action.user\r\n        };\r\n    case 'LOGIN_FAILURE':\r\n        return {};\r\n    case 'LOGOUT':\r\n        return {};\r\n    default:\r\n        return state\r\n    }\r\n}\r\n\r\nexport default authentication;","import { combineReducers } from 'redux';\r\n\r\nimport authentication from './auth';\r\nimport { users } from './userReducers';\r\n\r\nconst rootReducer = combineReducers({\r\n  authentication,\r\n  users\r\n});\r\n\r\nexport default rootReducer;","export const users = (state={}, action) => {\r\n    switch(action.type) {\r\n        case 'GETALL_REQUEST':\r\n            return {\r\n                loading: true\r\n            }\r\n\r\n        case 'GETALL_SUCCESS':\r\n            return {\r\n                items: action.users\r\n            }\r\n\r\n        case 'GETALL_FAILURE':\r\n            return {\r\n                error: action.error\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport rootReducer from '../reducers/_reducers';\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(\r\n        thunkMiddleware\r\n    )\r\n);","\r\n\r\nexport function configureFakeBackend() {\r\n\r\n    let users = [\r\n        { id: 1, email: 'test', password: 'test', firstName: 'Test', lastName: 'User' },\r\n        { id: 2, email: 'veena.rakshu@gmail.com', password: 'test', firstName: 'Veena', lastName: 'KR' },\r\n        { id: 3, email: 'test2', password: 'test', firstName: 'Test', lastName: '2' },\r\n        { id: 4, email: 'test3', password: 'test', firstName: 'Test', lastName: '3' }\r\n    ];\r\n    let realFetch = window.fetch;\r\n    window.fetch = function (url, opts) {\r\n        return new Promise((resolve, reject) => {\r\n            // wrap in timeout to simulate server api call\r\n            setTimeout(() => {\r\n\r\n                // authenticate\r\n                if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\r\n                    // get parameters from post request\r\n                    let params = JSON.parse(opts.body);\r\n\r\n                    // find if any user matches login credentials\r\n                    let filteredUsers = users.filter(user => {\r\n                        return user.email === params.email && user.password === params.password;\r\n                    });\r\n\r\n\r\n                    if (filteredUsers.length) {\r\n                        \r\n                        // if login details are valid return user details and fake jwt token\r\n                        let user = filteredUsers[0];\r\n                        let responseJson = {\r\n                            id: user.id,\r\n                            email: user.email,\r\n                            firstName: user.firstName,\r\n                            lastName: user.lastName,\r\n                            token: 'fake-jwt-token'\r\n                        };\r\n                        resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(responseJson)) });\r\n                    } else {\r\n                        // else return error\r\n                        reject('Email or password is incorrect');\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                // get users\r\n                if (url.endsWith('/users') && opts.method === 'GET') {\r\n                    // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\r\n                    if (opts.headers && opts.headers.Authorization === 'Bearer fake-jwt-token') {\r\n                        resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(users))});\r\n                    } else {\r\n                        // return 401 not authorised if token is null or invalid\r\n                        reject('Unauthorised');\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                // pass through any requests not handled above\r\n                realFetch(url, opts).then(response => {\r\n                    resolve(response)\r\n                });\r\n\r\n            }, 500);\r\n        });\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/styles.css';\nimport { store } from './store/configureStore';\nimport { Provider } from 'react-redux';\nimport { configureFakeBackend } from './helpers/_helpers';\n\nconfigureFakeBackend();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}